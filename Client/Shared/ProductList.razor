@using BlazorCommerceWebApp.Shared
@using System.Net
@using BlazorCommerceWebApp.Client.Services.ProductService
@inject IProductService ProductService
@implements IDisposable
@*Dependency injection for client side ProductService*@

@if (ProductService.Products.Count == 0)
{
    <span>Loading Products...</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Name"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Name</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">$@product.Price</h5>
                </div>
            </li>
            <hr class="rounded">
        }
    </ul>
}

@code {
    // Instead of making HTTP call here, we moved it to ProductService
    // We make the product list request in the index page now.
    
    protected override void OnInitialized()
    {
        // Notifies the component that its state has changed. When applicable, this will cause the component to be re-rendered.
        // Subscribe to the products changed action
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        // Unsubscribe to the products changed action
        ProductService.ProductsChanged -= StateHasChanged;
    }

}
    
